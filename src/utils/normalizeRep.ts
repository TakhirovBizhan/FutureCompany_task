import { RepositoryApi } from "../Models/RepositoryApi";
import { RepositoryModel } from "../Models/RepositoryModel";

export function normalizeRepository(data: RepositoryApi): RepositoryModel {
    return {
        id: data.id,
        nodeId: data.node_id,
        name: data.name,
        fullName: data.full_name,
        private: data.private,
        owner: {
            login: data.owner.login,
            id: data.owner.id,
            nodeId: data.owner.node_id,
            avatarUrl: data.owner.avatar_url,
            gravatarId: data.owner.gravatar_id,
            url: data.owner.url,
            htmlUrl: data.owner.html_url,
            followersUrl: data.owner.followers_url,
            followingUrl: data.owner.following_url,
            gistsUrl: data.owner.gists_url,
            starredUrl: data.owner.starred_url,
            subscriptionsUrl: data.owner.subscriptions_url,
            organizationsUrl: data.owner.organizations_url,
            reposUrl: data.owner.repos_url,
            eventsUrl: data.owner.events_url,
            receivedEventsUrl: data.owner.received_events_url,
            type: data.owner.type,
            siteAdmin: data.owner.site_admin,
        },
        htmlUrl: data.html_url,
        description: data.description,
        fork: data.fork,
        url: data.url,
        forksUrl: data.forks_url,
        keysUrl: data.keys_url,
        collaboratorsUrl: data.collaborators_url,
        teamsUrl: data.teams_url,
        hooksUrl: data.hooks_url,
        issueEventsUrl: data.issue_events_url,
        eventsUrl: data.events_url,
        assigneesUrl: data.assignees_url,
        branchesUrl: data.branches_url,
        tagsUrl: data.tags_url,
        blobsUrl: data.blobs_url,
        gitTagsUrl: data.git_tags_url,
        gitRefsUrl: data.git_refs_url,
        treesUrl: data.trees_url,
        statusesUrl: data.statuses_url,
        languagesUrl: data.languages_url,
        stargazersUrl: data.stargazers_url,
        contributorsUrl: data.contributors_url,
        subscribersUrl: data.subscribers_url,
        subscriptionUrl: data.subscription_url,
        commitsUrl: data.commits_url,
        gitCommitsUrl: data.git_commits_url,
        commentsUrl: data.comments_url,
        issueCommentUrl: data.issue_comment_url,
        contentsUrl: data.contents_url,
        compareUrl: data.compare_url,
        mergesUrl: data.merges_url,
        archiveUrl: data.archive_url,
        downloadsUrl: data.downloads_url,
        issuesUrl: data.issues_url,
        pullsUrl: data.pulls_url,
        milestonesUrl: data.milestones_url,
        notificationsUrl: data.notifications_url,
        labelsUrl: data.labels_url,
        releasesUrl: data.releases_url,
        deploymentsUrl: data.deployments_url,
        createdAt: data.created_at,
        updatedAt: data.updated_at,
        pushedAt: data.pushed_at,
        gitUrl: data.git_url,
        sshUrl: data.ssh_url,
        cloneUrl: data.clone_url,
        svnUrl: data.svn_url,
        homepage: data.homepage,
        size: data.size,
        stargazersCount: data.stargazers_count,
        watchersCount: data.watchers_count,
        language: data.language,
        hasIssues: data.has_issues,
        hasProjects: data.has_projects,
        hasDownloads: data.has_downloads,
        hasWiki: data.has_wiki,
        hasPages: data.has_pages,
        hasDiscussions: data.has_discussions,
        forksCount: data.forks_count,
        mirrorUrl: data.mirror_url,
        archived: data.archived,
        disabled: data.disabled,
        openIssuesCount: data.open_issues_count,
        license: data.license,
        allowForking: data.allow_forking,
        isTemplate: data.is_template,
        webCommitSignoffRequired: data.web_commit_signoff_required,
        topics: data.topics,
        visibility: data.visibility,
        forks: data.forks,
        openIssues: data.open_issues,
        watchers: data.watchers,
        defaultBranch: data.default_branch,
        score: data.score,
    };
}